// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package client

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson19c08265DecodeGitlabFbsDComDefinitionsClient(in *jlexer.Lexer, out *Utm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "campaign":
			out.Campaign = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "medium":
			out.Medium = string(in.String())
		case "term":
			out.Term = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGitlabFbsDComDefinitionsClient(out *jwriter.Writer, in Utm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Campaign != "" {
		const prefix string = ",\"campaign\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Campaign))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Medium))
	}
	if in.Term != "" {
		const prefix string = ",\"term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Term))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Utm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Utm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Utm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Utm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient(l, v)
}
func easyjson19c08265DecodeGitlabFbsDComDefinitionsClient1(in *jlexer.Lexer, out *GoogleIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gclid":
			out.Gclid = string(in.String())
		case "dclid":
			out.Dclid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGitlabFbsDComDefinitionsClient1(out *jwriter.Writer, in GoogleIds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Gclid != "" {
		const prefix string = ",\"gclid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Gclid))
	}
	if in.Dclid != "" {
		const prefix string = ",\"dclid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dclid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoogleIds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoogleIds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoogleIds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoogleIds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient1(l, v)
}
func easyjson19c08265DecodeGitlabFbsDComDefinitionsClient2(in *jlexer.Lexer, out *FbIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fbClickId":
			out.FbClickId = string(in.String())
		case "fbBrowserId":
			out.FbBrowserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGitlabFbsDComDefinitionsClient2(out *jwriter.Writer, in FbIds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FbClickId != "" {
		const prefix string = ",\"fbClickId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FbClickId))
	}
	if in.FbBrowserId != "" {
		const prefix string = ",\"fbBrowserId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FbBrowserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbIds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbIds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbIds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbIds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient2(l, v)
}
func easyjson19c08265DecodeGitlabFbsDComDefinitionsClient3(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "userId":
			out.UserId = int64(in.Int64())
		case "platform":
			out.Platform = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "analytics":
			if in.IsNull() {
				in.Skip()
				out.Analytics = nil
			} else {
				if out.Analytics == nil {
					out.Analytics = new(Analytics)
				}
				(*out.Analytics).UnmarshalEasyJSON(in)
			}
		case "applicationId":
			out.ApplicationId = int64(in.Int64())
		case "version":
			out.Version = int64(in.Int64())
		case "role":
			out.Role = string(in.String())
		case "utm":
			if in.IsNull() {
				in.Skip()
				out.Utm = nil
			} else {
				if out.Utm == nil {
					out.Utm = new(Utm)
				}
				(*out.Utm).UnmarshalEasyJSON(in)
			}
		case "googleIds":
			if in.IsNull() {
				in.Skip()
				out.GoogleIds = nil
			} else {
				if out.GoogleIds == nil {
					out.GoogleIds = new(GoogleIds)
				}
				(*out.GoogleIds).UnmarshalEasyJSON(in)
			}
		case "fbIds":
			if in.IsNull() {
				in.Skip()
				out.FbIds = nil
			} else {
				if out.FbIds == nil {
					out.FbIds = new(FbIds)
				}
				(*out.FbIds).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGitlabFbsDComDefinitionsClient3(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ip != "" {
		const prefix string = ",\"ip\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Ip))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"userAgent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Location != "" {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	if in.UserId != 0 {
		const prefix string = ",\"userId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserId))
	}
	if in.Platform != "" {
		const prefix string = ",\"platform\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Platform))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Analytics != nil {
		const prefix string = ",\"analytics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Analytics).MarshalEasyJSON(out)
	}
	if in.ApplicationId != 0 {
		const prefix string = ",\"applicationId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ApplicationId))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if in.Utm != nil {
		const prefix string = ",\"utm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Utm).MarshalEasyJSON(out)
	}
	if in.GoogleIds != nil {
		const prefix string = ",\"googleIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GoogleIds).MarshalEasyJSON(out)
	}
	if in.FbIds != nil {
		const prefix string = ",\"fbIds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FbIds).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient3(l, v)
}
func easyjson19c08265DecodeGitlabFbsDComDefinitionsClient4(in *jlexer.Lexer, out *Analytics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "appsFlyerId":
			out.AppsFlyerId = string(in.String())
		case "fireBaseId":
			out.FireBaseId = string(in.String())
		case "advertisingId":
			out.AdvertisingId = string(in.String())
		case "fireBaseAppInstanceId":
			out.FireBaseAppInstanceId = string(in.String())
		case "vendorId":
			out.VendorId = string(in.String())
		case "sessionId":
			out.SessionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson19c08265EncodeGitlabFbsDComDefinitionsClient4(out *jwriter.Writer, in Analytics) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AppsFlyerId != "" {
		const prefix string = ",\"appsFlyerId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.AppsFlyerId))
	}
	if in.FireBaseId != "" {
		const prefix string = ",\"fireBaseId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FireBaseId))
	}
	if in.AdvertisingId != "" {
		const prefix string = ",\"advertisingId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdvertisingId))
	}
	if in.FireBaseAppInstanceId != "" {
		const prefix string = ",\"fireBaseAppInstanceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FireBaseAppInstanceId))
	}
	if in.VendorId != "" {
		const prefix string = ",\"vendorId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VendorId))
	}
	if in.SessionId != "" {
		const prefix string = ",\"sessionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SessionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Analytics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Analytics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson19c08265EncodeGitlabFbsDComDefinitionsClient4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Analytics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Analytics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson19c08265DecodeGitlabFbsDComDefinitionsClient4(l, v)
}
