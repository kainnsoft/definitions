// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi(in *jlexer.Lexer, out *Utm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "campaign":
			out.Campaign = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "medium":
			out.Medium = string(in.String())
		case "term":
			out.Term = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi(out *jwriter.Writer, in Utm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"campaign\":"
		out.RawString(prefix[1:])
		out.String(string(in.Campaign))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"medium\":"
		out.RawString(prefix)
		out.String(string(in.Medium))
	}
	{
		const prefix string = ",\"term\":"
		out.RawString(prefix)
		out.String(string(in.Term))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Utm) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Utm) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Utm) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Utm) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi1(in *jlexer.Lexer, out *OptionalInt64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi1(out *jwriter.Writer, in OptionalInt64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionalInt64) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionalInt64) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionalInt64) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionalInt64) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi1(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi2(in *jlexer.Lexer, out *GoogleIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gclid":
			out.GclId = string(in.String())
		case "dclid":
			out.DclId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi2(out *jwriter.Writer, in GoogleIds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gclid\":"
		out.RawString(prefix[1:])
		out.String(string(in.GclId))
	}
	{
		const prefix string = ",\"dclid\":"
		out.RawString(prefix)
		out.String(string(in.DclId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GoogleIds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GoogleIds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GoogleIds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GoogleIds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi2(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi3(in *jlexer.Lexer, out *FbIds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fbClickId":
			out.FbClickId = string(in.String())
		case "fbBrowserId":
			out.FbBrowserId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi3(out *jwriter.Writer, in FbIds) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fbClickId\":"
		out.RawString(prefix[1:])
		out.String(string(in.FbClickId))
	}
	{
		const prefix string = ",\"fbBrowserId\":"
		out.RawString(prefix)
		out.String(string(in.FbBrowserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FbIds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FbIds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FbIds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FbIds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi3(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi4(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "userId":
			out.UserId = int64(in.Int64())
		case "platform":
			out.Platform = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "source":
			out.Source = string(in.String())
		case "applicationId":
			out.ApplicationId = int64(in.Int64())
		case "analytics":
			(out.Analytics).UnmarshalEasyJSON(in)
		case "role":
			out.Role = string(in.String())
		case "utm":
			if in.IsNull() {
				in.Skip()
				out.Utm = nil
			} else {
				if out.Utm == nil {
					out.Utm = new(Utm)
				}
				(*out.Utm).UnmarshalEasyJSON(in)
			}
		case "googleIds":
			if in.IsNull() {
				in.Skip()
				out.GoogleIds = nil
			} else {
				if out.GoogleIds == nil {
					out.GoogleIds = new(GoogleIds)
				}
				(*out.GoogleIds).UnmarshalEasyJSON(in)
			}
		case "fbIds":
			if in.IsNull() {
				in.Skip()
				out.FBIds = nil
			} else {
				if out.FBIds == nil {
					out.FBIds = new(FbIds)
				}
				(*out.FBIds).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi4(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserId))
	}
	{
		const prefix string = ",\"platform\":"
		out.RawString(prefix)
		out.String(string(in.Platform))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"applicationId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ApplicationId))
	}
	{
		const prefix string = ",\"analytics\":"
		out.RawString(prefix)
		(in.Analytics).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"utm\":"
		out.RawString(prefix)
		if in.Utm == nil {
			out.RawString("null")
		} else {
			(*in.Utm).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"googleIds\":"
		out.RawString(prefix)
		if in.GoogleIds == nil {
			out.RawString("null")
		} else {
			(*in.GoogleIds).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"fbIds\":"
		out.RawString(prefix)
		if in.FBIds == nil {
			out.RawString("null")
		} else {
			(*in.FBIds).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi4(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi5(in *jlexer.Lexer, out *ApiRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "client":
			(out.Client).UnmarshalEasyJSON(in)
		case "body":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Body = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Body)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi5(out *jwriter.Writer, in ApiRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"client\":"
		out.RawString(prefix)
		(in.Client).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Body {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi5(l, v)
}
func easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi6(in *jlexer.Lexer, out *Analytics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "appsFlyerId":
			out.AppsFlyerId = string(in.String())
		case "fireBaseId":
			out.FireBaseId = string(in.String())
		case "fireBaseAppInstanceId":
			out.FireBaseAppInstanceId = string(in.String())
		case "advertisingId":
			out.AdvertisingId = string(in.String())
		case "vendorId":
			out.VendorId = string(in.String())
		case "sessionId":
			out.SessionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi6(out *jwriter.Writer, in Analytics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"appsFlyerId\":"
		out.RawString(prefix[1:])
		out.String(string(in.AppsFlyerId))
	}
	{
		const prefix string = ",\"fireBaseId\":"
		out.RawString(prefix)
		out.String(string(in.FireBaseId))
	}
	{
		const prefix string = ",\"fireBaseAppInstanceId\":"
		out.RawString(prefix)
		out.String(string(in.FireBaseAppInstanceId))
	}
	{
		const prefix string = ",\"advertisingId\":"
		out.RawString(prefix)
		out.String(string(in.AdvertisingId))
	}
	{
		const prefix string = ",\"vendorId\":"
		out.RawString(prefix)
		out.String(string(in.VendorId))
	}
	{
		const prefix string = ",\"sessionId\":"
		out.RawString(prefix)
		out.String(string(in.SessionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Analytics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Analytics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1cedd36EncodeGitlabFbsDComDevGoLegacyHelpersApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Analytics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Analytics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1cedd36DecodeGitlabFbsDComDevGoLegacyHelpersApi6(l, v)
}
