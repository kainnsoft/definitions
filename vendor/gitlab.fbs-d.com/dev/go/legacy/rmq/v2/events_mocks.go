// Code generated by MockGen. DO NOT EDIT.
// Source: events.go

// Package rmq is a generated GoMock package.
package rmq

import (
	gomock "github.com/golang/mock/gomock"
	excp "gitlab.fbs-d.com/dev/go/legacy/exceptions"
	api "gitlab.fbs-d.com/dev/go/legacy/helpers/api"
	reflect "reflect"
)

// MockIEventSender is a mock of IEventSender interface
type MockIEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockIEventSenderMockRecorder
}

// MockIEventSenderMockRecorder is the mock recorder for MockIEventSender
type MockIEventSenderMockRecorder struct {
	mock *MockIEventSender
}

// NewMockIEventSender creates a new mock instance
func NewMockIEventSender(ctrl *gomock.Controller) *MockIEventSender {
	mock := &MockIEventSender{ctrl: ctrl}
	mock.recorder = &MockIEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventSender) EXPECT() *MockIEventSenderMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockIEventSender) Run(r IRmq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockIEventSenderMockRecorder) Run(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIEventSender)(nil).Run), r)
}

// Trigger mocks base method
func (m *MockIEventSender) Trigger(token string, client api.Client, eventName string, event interface{}) excp.IException {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trigger", token, client, eventName, event)
	ret0, _ := ret[0].(excp.IException)
	return ret0
}

// Trigger indicates an expected call of Trigger
func (mr *MockIEventSenderMockRecorder) Trigger(token, client, eventName, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trigger", reflect.TypeOf((*MockIEventSender)(nil).Trigger), token, client, eventName, event)
}
